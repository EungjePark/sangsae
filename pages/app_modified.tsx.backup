import React, { useState, useEffect, useRef } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem, SelectGroup } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { generateProductDetail, countTokens, type ProductDetailContent, type ProductDetailSection, type ProductCategory } from '@/lib/gemini';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Checkbox } from '@/components/ui/checkbox';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { Separator } from '@/components/ui/separator';
import { CollapsibleTrigger, CollapsibleContent, Collapsible } from '@/components/ui/collapsible';
import { ChevronDown, ChevronUp, Plus, X, Tag, Loader2, Sparkles } from 'lucide-react';
import { LoadingSpinner, FullPageLoader } from '@/components/ui/loading-spinner';
import { Badge } from '@/components/ui/badge';
import 'katex/dist/katex.min.css';
import { useToast } from "@/hooks/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { formatContent } from "@/lib/content-formatter";
import { copyToClipboard, getKoreanTitle } from "@/lib/clipboard-helper";

// 브랜드 색상 및 스타일 상수
const BRAND = {
  color: {
    primary: '#ff68b4',
  },
};

// 클립보드 복사 함수는 clipboard-helper.ts에서 가져옵니다

const AppPage: NextPage = () => {
  // toast 훅 초기화
  const { toast } = useToast();
  
  // 상태 관리
  const [generatedContent, setGeneratedContent] = useState<ProductDetailContent | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // 클립보드 복사 핸들러
  const handleCopyToClipboard = () => {
    if (generatedContent) {
      copyToClipboard(generatedContent)
        .catch(err => {
          console.error('클립보드 복사 실패:', err);
          toast({
            title: "복사 실패",
            description: "클립보드 복사 중 오류가 발생했습니다.",
            variant: "destructive",
          });
        });
    } else {
      toast({
        title: "복사 실패",
        description: "복사할 콘텐츠가 없습니다.",
        variant: "destructive",
      });
    }
  };

  // 제품 상세 정보 생성 함수
  const handleGenerateContent = async (productInfo: any) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await generateProductDetail(productInfo);
      if (result.success) {
        setGeneratedContent(result.data);
      } else {
        setError(result.error || '콘텐츠 생성 중 오류가 발생했습니다.');
      }
    } catch (err) {
      console.error('콘텐츠 생성 오류:', err);
      setError('콘텐츠 생성 중 오류가 발생했습니다.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>상세페이지 생성기</title>
        <meta name="description" content="AI로 상세페이지를 쉽고 빠르게 만들어보세요" />
      </Head>
      
      <main className="container mx-auto py-6 px-4 md:px-6">
        {/* 여기에 UI 구성 요소 */}
        
        {/* 클립보드 복사 버튼 */}
        {generatedContent && (
          <Button
            className="flex items-center gap-1 px-6 bg-gray-800 hover:bg-gray-900 text-white"
            onClick={handleCopyToClipboard}
            disabled={isLoading}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>
            전체 복사하기
          </Button>
        )}
        
        {/* 로딩 상태 표시 */}
        {isLoading && <LoadingSpinner size="lg" showText={true} text="콘텐츠를 생성하고 있어요..." />}
        
        {/* 오류 메시지 표시 */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mt-4">
            {error}
          </div>
        )}
      </main>
      
      {/* Toaster 컴포넌트 */}
      <Toaster />
    </>
  );
};

export default AppPage;
