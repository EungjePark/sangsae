# 프로젝트 구조 규칙
architecture:
  # 프로젝트 구조
  structure:
    - "페이지 컴포넌트는 pages/ 디렉토리에 배치합니다."
    - "재사용 가능한 컴포넌트는 components/ 디렉토리에 배치합니다."
    - "비즈니스 로직과 API 호출은 lib/ 디렉토리에 배치합니다."
    - "API 라우트는 pages/api/ 디렉토리에 배치합니다."
    - "전역 스타일은 styles/ 디렉토리에 배치합니다."
    - "정적 파일은 public/ 디렉토리에 배치합니다."
  
  # 모듈화 전략
  modularity:
    - "기능별로 코드를 모듈화합니다."
    - "유사한 기능은 동일한 디렉토리에 그룹화합니다."
    - "모듈 간 상호 의존성을 최소화합니다."
    - "순환 의존성을 피합니다."
    - "각 모듈은 명확한 책임을 가져야 합니다."
  
  # API 및 데이터 흐름
  data_flow:
    - "API 호출은 전용 함수로 추상화합니다."
    - "데이터 변환은 API 호출 후 별도 함수로 수행합니다."
    - "데이터 흐름은 단방향으로 유지합니다."
    - "전역 상태는 최소한으로 사용합니다."
    - "컴포넌트 트리 깊이는 5단계 이하로 유지합니다."
  
  # 성능 최적화
  performance:
    - "무거운 계산은 useMemo로 메모이제이션합니다."
    - "컴포넌트 렌더링 최적화를 위해 React.memo를 사용합니다."
    - "이벤트 핸들러는 useCallback으로 메모이제이션합니다."
    - "큰 목록은 가상화 기술을 사용합니다."
    - "이미지는 최적화하여 사용합니다."
    - "코드 스플리팅을 활용하여 초기 로드 시간을 줄입니다."
  
  # 오류 처리
  error_handling:
    - "모든 API 호출에 오류 처리를 추가합니다."
    - "전역 오류 처리기를 구현합니다."
    - "사용자에게 친숙한 오류 메시지를 표시합니다."
    - "로깅 시스템을 구현하여 오류를 추적합니다."
    - "복구 가능한 오류에 대한 전략을 수립합니다."
  
  # 보안 및 인증
  security:
    - "환경 변수를 통해 API 키를 관리합니다."
    - "민감한 정보는 서버 측에서만 처리합니다."
    - "모든 사용자 입력은 검증합니다."
    - "XSS 및 CSRF 공격을 방지합니다."
    - "인증 상태를 안전하게 관리합니다."
  
  # 접근성
  accessibility:
    - "시맨틱 HTML 요소를 사용합니다."
    - "적절한 ARIA 속성을 제공합니다."
    - "키보드 탐색을 지원합니다."
    - "적절한 색상 대비를 유지합니다."
    - "스크린 리더를 고려한 설계를 합니다."
  
  # 테스트
  testing:
    - "핵심 기능에 대한 단위 테스트를 작성합니다."
    - "API 호출에 대한 모의 객체를 사용합니다."
    - "엣지 케이스를 고려한 테스트를 작성합니다."
    - "사용자 흐름을 테스트하는 E2E 테스트를 추가합니다."
    - "CI/CD 파이프라인에 테스트를 통합합니다."

  # 타이틀 블록 규칙
  title_block:
    - "타이틀 블록은 매우 짧고 간결해야 합니다!"
    - "제품 이름과 짧은 캐치프레이즈만 포함하세요 (20-30자 이내)"
    - "제품 설명이나 상세 기능을 여기에 포함하지 마세요"

  # 섹션 블록 규칙
  section_block:
    - "각 섹션은 이전 맥락을 유지한채 새로운 섹션을 작성합니다."
    - "섹션 내용을 재생성할 때는 이전 섹션들의 내용을 참고하여 작성합니다."
    - "섹션을 재생성할 때는 [${sectionId}]를 꼭 참고해서 맥락을 유지한채 작성해주세요."
